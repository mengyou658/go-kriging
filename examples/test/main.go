package main

import (
	"encoding/csv"
	"fmt"

	jsoniter "github.com/json-iterator/go"
	"image/png"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strconv"
	"time"

	"github.com/liuvigongzuoshi/go-kriging/ordinarykriging"
	"github.com/liuvigongzuoshi/go-kriging/pkg/json"
)

const testDataDirPath = "testdata"
const tempDataDirPath = "C:"
const cpuProfileFilePath = tempDataDirPath + "/cpu_profile"
const memProfileFilePath = tempDataDirPath + "/mem_profile"

func main() {
	//cpuProfile, _ := os.Create(cpuProfileFilePath)
	//if err := pprof.StartCPUProfile(cpuProfile); err != nil {
	//	log.Fatal(err)
	//}
	//memProfile, _ := os.Create(memProfileFilePath)
	//if err := pprof.WriteHeapProfile(memProfile); err != nil {
	//	log.Fatal(err)
	//}
	//defer func() {
	//pprof.StopCPUProfile()
	//cpuProfile.Close()
	//memProfile.Close()
	//}()

	//data, err := readCsvFile("examples/csv/testdata/2045.csv")
	//if err != nil {
	//	log.Fatal(err)
	//}
	data := map[string][]float64{"values": []float64{5.66, 6.45, 7.31, 8.24, 9.22, 10.23, 11.27, 12.3, 13.32, 14.3, 15.23, 16.09, 16.87, 17.56, 18.16, 18.66, 19.07, 19.36, 19.61, 19.82, 20, 20.16, 20.33, 20.5, 20.69, 20.91, 21.14, 21.37, 21.62, 21.87, 22.12, 22.37, 22.61, 22.84, 23.06, 23.26, 5.39, 6.16, 6.99, 7.9, 8.86, 9.86, 10.88, 11.91, 12.93, 13.91, 14.85, 15.71, 16.5, 17.2, 23.26, 5.39, 6.16, 6.99, 7.9, 8.86, 9.86, 10.88, 11.91, 12.93, 13.91, 14.85, 15.71, 16.5, 17.2, 17.8, 18.3, 18.7, 19.02, 19.25, 19.43, 19.59, 19.74, 19.9, 20.08, 20.28, 20.51, 20.77, 21.02, 21.29, 21.56, 21.82, 22.09, 22.35, 22.59, 22.83, 23.05, 5.08, 5.81, 6.62, 7.49, 8.42, 9.39, 10.39, 11.4, 12.4, 13.38, 14.3, 15.17, 15.96, 22.83, 23.05, 5.08, 5.81, 6.62, 7.49, 8.42, 9.39, 10.39, 11.4, 12.4, 13.38, 14.3, 15.17, 15.96, 16.65, 17.25, 17.75, 18.16, 18.47, 18.71, 18.91, 19.03, 19.18, 19.34, 19.53, 19.75, 20.02, 20.29, 20.59, 20.88, 21.18, 21.47, 21.77, 22.05, 22.32, 22.58, 22.83, 4.76, 5.45, 6.21, 7.04, 7.93, 8.86, 9.83, 10.81, 11.79, 12.74, 13.66, 14.51, 22.32, 22.58, 22.83, 4.76, 5.45, 6.21, 7.04, 7.93, 8.86, 9.83, 10.81, 11.79, 12.74, 13.66, 14.51, 15.29, 15.98, 16.58, 17.08, 17.49, 17.8, 18.04, 18.23, 18.37, 18.52, 18.7, 18.91, 19.15, 19.44, 19.77, 20.1, 20.43, 20.76, 21.1, 21.42, 21.74, 22.05, 22.34, 22.62, 4.44, 5.09, 5.81, 6.6, 7.44, 8.34, 9.27, 10.21, 11.16, 12.08, 12.98, 21.74, 22.05, 22.34, 22.62, 4.44, 5.09, 5.81, 6.6, 7.44, 8.34, 9.27, 10.21, 11.16, 12.08, 12.98, 13.82, 14.59, 15.28, 15.88, 16.38, 16.78, 17.1, 17.34, 17.53, 17.69, 17.84, 18.04, 18.28, 18.57, 18.9, 19.27, 19.64, 20.01, 20.38, 20.75, 21.12, 21.47, 21.81, 22.14, 22.46, 4.17, 4.78, 5.46, 6.21, 7.01, 7.87, 8.76, 9.67, 10.58, 11.48, 21.12, 21.47, 21.81, 22.14, 22.46, 4.17, 4.78, 5.46, 6.21, 7.01, 7.87, 8.76, 9.67, 10.58, 11.48, 12.36, 13.18, 13.95, 14.64, 15.24, 15.75, 16.16, 16.48, 16.73, 16.93, 17.07, 17.26, 17.49, 17.77, 18.09, 18.45, 18.88, 19.3, 19.71, 20.12, 20.52, 20.92, 21.31, 21.69, 22.05, 22.41, 3.95, 4.54, 5.19, 5.91, 6.68, 7.5, 8.36, 9.24, 10.13, 20.52, 20.92, 21.31, 21.69, 22.05, 22.41, 3.95, 4.54, 5.19, 5.91, 6.68, 7.5, 8.36, 9.24, 10.13, 11.01, 11.87, 12.69, 13.46, 14.16, 14.77, 15.29, 15.72, 16.05, 16.31, 16.48, 16.66, 16.87, 17.13, 17.45, 17.83, 18.24, 18.68, 19.15, 19.6, 20.04, 20.48, 20.91, 21.33, 21.74, 22.14, 22.52, 3.79, 4.36, 5, 5.69, 6.45, 7.25, 8.09, 8.95, 20.04, 20.48, 20.91, 21.33, 21.74, 22.14, 22.52, 3.79, 4.36, 5, 5.69, 6.45, 7.25, 8.09, 8.95, 9.83, 10.71, 11.56, 12.39, 13.17, 13.88, 14.52, 15.07, 15.51, 15.85, 16.1, 16.3, 16.49, 16.72, 17.03, 17.39, 17.8, 18.26, 18.74, 19.24, 19.73, 20.21, 20.67, 21.13, 21.57, 22.01, 22.43, 22.85, 3.69, 4.25, 4.88, 5.57, 6.31, 7.11, 7.94, 19.73, 20.21, 20.67, 21.13, 21.57, 22.01, 22.43, 22.85, 3.69, 4.25, 4.88, 5.57, 6.31, 7.11, 7.94, 8.81, 9.69, 10.57, 11.44, 12.28, 13.09, 13.83, 14.5, 15.08, 15.54, 15.91, 16.18, 16.38, 16.59, 16.83, 17.16, 17.56, 18.03, 18.53, 19.05, 19.59, 20.11, 20.62, 21.11, 21.59, 22.06, 22.51, 22.96, 23.4, 3.62, 4.18, 4.81, 5.5, 6.24, 7.04, 19.59, 20.11, 20.62, 21.11, 21.59, 22.06, 22.51, 22.96, 23.4, 3.62, 4.18, 4.81, 5.5, 6.24, 7.04, 7.88, 8.76, 9.65, 10.55, 11.44, 12.32, 13.16, 13.94, 14.65, 15.25, 15.76, 16.15, 16.44, 16.64, 16.83, 17.08, 17.43, 17.89, 18.4, 18.95, 19.52, 20.09, 20.65, 21.19, 21.71, 22.22, 22.71, 23.18, 23.65, 24.11, 3.56, 4.12, 4.75, 5.45, 6.2, 19.52, 20.09, 20.65, 21.19, 21.71, 22.22, 22.71, 23.18, 23.65, 24.11, 3.56, 4.12, 4.75, 5.45, 6.2, 7.01, 7.87, 8.76, 9.67, 10.6, 11.52, 12.43, 13.31, 14.13, 14.89, 15.56, 16.11, 16.53, 16.81, 16.99, 17.15, 17.4, 17.79, 18.29, 18.86, 19.47, 20.08, 20.7, 21.3, 21.87, 22.43, 22.96, 23.47, 23.97, 24.45, 24.93, 3.49, 4.06, 4.69, 5.39, 19.47, 20.08, 20.7, 21.3, 21.87, 22.43, 22.96, 23.47, 23.97, 24.45, 24.93, 3.49, 4.06, 4.69, 5.39, 6.16, 6.98, 7.85, 8.76, 9.7, 10.66, 11.61, 12.55, 13.48, 14.36, 15.17, 15.9, 16.49, 16.94, 17.22, 17.36, 17.47, 17.71, 18.13, 18.68, 19.32, 19.98, 20.65, 21.31, 21.95, 22.57, 23.16, 23.72, 24.26, 24.79, 25.29, 25.78, 3.42, 3.98, 4.61, 19.32, 19.98, 20.65, 21.31, 21.95, 22.57, 23.16, 23.72, 24.26, 24.79, 25.29, 25.78, 3.42, 3.98, 4.61, 5.32, 6.09, 6.92, 7.8, 8.73, 9.69, 10.66, 11.65, 12.64, 13.61, 14.55, 15.42, 16.19, 16.84, 17.31, 17.58, 17.66, 17.69, 17.9, 18.36, 18.98, 19.67, 20.4, 21.12, 21.83, 22.51, 23.18, 23.81, 24.41, 24.99, 25.55, 26.08, 26.59, 3.32, 3.88, 18.98, 19.67, 20.4, 21.12, 21.83, 22.51, 23.18, 23.81, 24.41, 24.99, 25.55, 26.08, 26.59, 3.32, 3.88, 4.51, 5.21, 5.98, 6.81, 7.69, 8.63, 9.6, 10.6, 11.62, 12.64, 13.65, 14.64, 15.56, 16.39, 17.09, 17.59, 17.85, 17.86, 17.75, 17.93, 18.43, 19.11, 19.87, 20.65, 21.42, 22.17, 22.91, 23.61, 24.3, 24.95, 25.57, 26.16, 26.73, 27.27, 3.22, 18.43, 19.11, 19.87, 20.65, 21.42, 22.17, 22.91, 23.61, 24.3, 24.95, 25.57, 26.16, 26.73, 27.27, 3.22, 3.76, 4.38, 5.06, 5.82, 6.64, 7.52, 8.46, 9.44, 10.44, 11.48, 12.53, 13.57, 14.6, 15.57, 16.46, 17.2, 17.74, 18, 17.93, 17.61, 17.77, 18.31, 19.04, 19.86, 20.68, 21.5, 22.29, 23.06, 23.82, 24.55, 25.25, 25.92, 26.56, 27.16, 27.74, 17.77, 18.31, 19.04, 19.86, 20.68, 21.5, 22.29, 23.06, 23.82, 24.55, 25.25, 25.92, 26.56, 27.16, 27.74, 3.11, 3.63, 4.22, 4.89, 5.63, 6.43, 7.3, 8.22, 9.19, 10.2, 11.23, 12.3, 13.37, 14.42, 15.44, 16.38, 17.19, 17.77, 18.05, 17.93, 17.36, 17.51, 18.02, 18.78, 19.64, 20.49, 21.33, 22.15, 22.95, 23.75, 24.52, 25.27, 25.99, 26.68, 27.33, 17.36, 17.51, 18.02, 18.78, 19.64, 20.49, 21.33, 22.15, 22.95, 23.75, 24.52, 25.27, 25.99, 26.68, 27.33, 27.95, 3, 3.5, 4.07, 4.71, 5.42, 6.19, 7.03, 7.93, 8.88, 9.88, 10.92, 11.97, 13.05, 14.14, 15.19, 16.19, 17.05, 17.7, 18.02, 17.9, 17.39, 17.23, 17.59, 18.37, 19.25, 20.1, 20.94, 21.76, 22.58, 23.4, 24.21, 25.01, 25.77, 26.51, 17.9, 17.39, 17.23, 17.59, 18.37, 19.25, 20.1, 20.94, 21.76, 22.58, 23.4, 24.21, 25.01, 25.77, 26.51, 27.21, 27.87, 2.91, 3.38, 3.92, 4.53, 5.2, 5.95, 6.75, 7.62, 8.54, 9.52, 10.54, 11.59, 12.68, 13.77, 14.86, 15.9, 16.84, 17.57, 17.95, 17.88, 17.4, 16.96, 17.08, 17.89, 18.74, 19.55, 20.35, 21.16, 21.97, 22.8, 23.64, 24.47, 25.28, 17.95, 17.88, 17.4, 16.96, 17.08, 17.89, 18.74, 19.55, 20.35, 21.16, 21.97, 22.8, 23.64, 24.47, 25.28, 26.06, 26.8, 27.5, 2.83, 3.28, 3.79, 4.36, 5, 5.71, 6.48, 7.31, 8.2, 9.14, 10.14, 11.17, 12.25, 13.36, 14.48, 15.57, 16.58, 17.41, 17.89, 17.88, 17.42, 16.76, 16.59, 17.42, 18.18, 18.91, 19.64, 20.4, 21.19, 22.01, 22.85, 23.7, 17.41, 17.89, 17.88, 17.42, 16.76, 16.59, 17.42, 18.18, 18.91, 19.64, 20.4, 21.19, 22.01, 22.85, 23.7, 24.54, 25.35, 26.13, 26.87, 2.78, 3.2, 3.68, 4.22, 4.82, 5.49, 6.22, 7.02, 7.87, 8.78, 9.74, 10.76, 11.82, 12.93, 14.08, 15.23, 16.34, 17.26, 17.86, 17.93, 17.48, 16.78, 16.49, 17.03, 17.62, 18.22, 18.85, 19.53, 20.28, 21.07, 21.9, 16.34, 17.26, 17.86, 17.93, 17.48, 16.78, 16.49, 17.03, 17.62, 18.22, 18.85, 19.53, 20.28, 21.07, 21.9, 22.75, 23.61, 24.45, 25.26, 26.02, 2.75, 3.14, 3.59, 4.1, 4.68, 5.31, 6, 6.76, 7.57, 8.44, 9.37, 10.36, 11.42, 12.53, 13.69, 14.9, 16.09, 17.16, 17.89, 18.04, 17.62, 16.94, 16.57, 16.76, 17.12, 17.54, 18.03, 18.63, 19.3, 20.05, 14.9, 16.09, 17.16, 17.89, 18.04, 17.62, 16.94, 16.57, 16.76, 17.12, 17.54, 18.03, 18.63, 19.3, 20.05, 20.85, 21.68, 22.55, 23.4, 24.22, 25.01, 2.74, 3.11, 3.54, 4.02, 4.56, 5.16, 5.82, 6.54, 7.31, 8.15, 9.05, 10.01, 11.04, 12.15, 13.33, 14.58, 15.87, 17.1, 18, 18.23, 17.8, 17.14, 16.66, 16.57, 16.68, 16.9, 17.24, 17.71, 18.31, 13.33, 14.58, 15.87, 17.1, 18, 18.23, 17.8, 17.14, 16.66, 16.57, 16.68, 16.9, 17.24, 17.71, 18.31, 18.99, 19.75, 20.56, 21.41, 22.26, 23.09, 23.88, 2.76, 3.11, 3.51, 3.97, 4.48, 5.05, 5.67, 6.36, 7.1, 7.9, 8.77, 9.7, 10.72, 11.82, 13.01, 14.3, 15.68, 17.07, 18.18, 18.46, 18.03, 17.34, 16.77, 16.44, 16.31, 16.32, 16.5, 16.84, 11.82, 13.01, 14.3, 15.68, 17.07, 18.18, 18.46, 18.03, 17.34, 16.77, 16.44, 16.31, 16.32, 16.5, 16.84, 17.33, 17.94, 18.66, 19.43, 20.24, 21.07, 21.89, 22.69, 2.78, 3.12, 3.5, 3.94, 4.42, 4.97, 5.56, 6.21, 6.92, 7.7, 8.53, 9.44, 10.44, 11.52, 12.72, 14.04, 15.49, 17.04, 18.43, 18.71, 18.21, 17.53, 16.88, 16.36, 16, 15.8, 15.81, 10.44, 11.52, 12.72, 14.04, 15.49, 17.04, 18.43, 18.71, 18.21, 17.53, 16.88, 16.36, 16, 15.8, 15.81, 16.01, 16.4, 16.94, 17.59, 18.32, 19.09, 19.88, 20.7, 21.49, 2.83, 3.15, 3.51, 3.93, 4.39, 4.91, 5.48, 6.1, 6.79, 7.53, 8.34, 9.23, 10.2, 11.27, 12.46, 13.8, 15.3, 16.97, 18.71, 18.88, 18.33, 17.68, 16.99, 16.32, 15.74, 15.34, 9.23, 10.2, 11.27, 12.46, 13.8, 15.3, 16.97, 18.71, 18.88, 18.33, 17.68, 16.99, 16.32, 15.74, 15.34, 15.18, 15.25, 15.55, 16.01, 16.59, 17.26, 17.99, 18.75, 19.52, 20.29, 2.88, 3.18, 3.53, 3.93, 4.38, 4.87, 5.42, 6.02, 6.68, 7.4, 8.18, 9.04, 9.99, 11.04, 12.22, 13.55, 15.06, 16.76, 18.55, 18.79, 18.35, 17.78, 17.09, 16.31, 15.53, 8.18, 9.04, 9.99, 11.04, 12.22, 13.55, 15.06, 16.76, 18.55, 18.79, 18.35, 17.78, 17.09, 16.31, 15.53, 14.93, 14.6, 14.56, 14.76, 15.14, 15.66, 16.28, 16.95, 17.67, 18.39, 19.13, 2.93, 3.22, 3.56, 3.95, 4.37, 4.85, 5.38, 5.96, 6.59, 7.29, 8.05, 8.88, 9.81, 10.84, 11.99, 13.3, 14.79, 16.42, 17.94, 18.45, 18.25, 17.82, 17.18, 16.29, 7.29, 8.05, 8.88, 9.81, 10.84, 11.99, 13.3, 14.79, 16.42, 17.94, 18.45, 18.25, 17.82, 17.18, 16.29, 15.34, 14.55, 14.07, 13.92, 14.04, 14.36, 14.82, 15.37, 16, 16.66, 17.35, 18.04, 2.98, 3.27, 3.59, 3.96, 4.37, 4.84, 5.34, 5.91, 6.52, 7.19, 7.93, 8.74, 9.64, 10.64, 11.77, 13.04, 14.47, 15.99, 17.35, 18, 18.05, 17.81, 17.25, 6.52, 7.19, 7.93, 8.74, 9.64, 10.64, 11.77, 13.04, 14.47, 15.99, 17.35, 18, 18.05, 17.81, 17.25, 16.28, 15.14, 14.18, 13.57, 13.34, 13.39, 13.65, 14.05, 14.56, 15.13, 15.75, 16.39, 17.04, 3.03, 3.3, 3.62, 3.97, 4.38, 4.82, 5.32, 5.86, 6.46, 7.11, 7.82, 8.61, 9.48, 10.45, 11.54, 12.76, 14.12, 15.53, 16.77, 17.5, 17.77, 17.75, 5.86, 6.46, 7.11, 7.82, 8.61, 9.48, 10.45, 11.54, 12.76, 14.12, 15.53, 16.77, 17.5, 17.77, 17.75, 17.33, 16.25, 14.92, 13.79, 13.1, 12.81, 12.81, 13.01, 13.36, 13.82, 14.35, 14.92, 15.51, 16.11, 3.07, 3.33, 3.64, 3.99, 4.38, 4.81, 5.29, 5.82, 6.4, 7.03, 7.72, 8.48, 9.32, 10.26, 11.31, 12.47, 13.74, 15.06, 16.21, 16.99, 17.41, 5.29, 5.82, 6.4, 7.03, 7.72, 8.48, 9.32, 10.26, 11.31, 12.47, 13.74, 15.06, 16.21, 16.99, 17.41, 17.61, 17.4, 16.16, 14.66, 13.37, 12.63, 12.33, 12.29, 12.45, 12.75, 13.16, 13.65, 14.17, 14.72, 15.28, 3.1, 3.36, 3.65, 3.99, 4.37, 4.79, 5.26, 5.77, 6.33, 6.94, 7.62, 8.35, 9.17, 10.07, 11.06, 12.16, 13.35, 14.57, 15.65, 16.46, 4.79, 5.26, 5.77, 6.33, 6.94, 7.62, 8.35, 9.17, 10.07, 11.06, 12.16, 13.35, 14.57, 15.65, 16.46, 16.98, 17.32, 17.46, 15.97, 14.35, 12.92, 12.18, 11.9, 11.83, 11.95, 12.21, 12.58, 13.02, 13.51, 14.01, 14.52, 3.11, 3.37, 3.66, 3.99, 4.35, 4.76, 5.22, 5.72, 6.26, 6.86, 7.51, 8.22, 9, 9.86, 10.81, 11.84, 12.94, 14.06, 15.1, 4.35, 4.76, 5.22, 5.72, 6.26, 6.86, 7.51, 8.22, 9, 9.86, 10.81, 11.84, 12.94, 14.06, 15.1, 15.89, 16.46, 16.85, 16.89, 15.6, 14.02, 12.44, 11.79, 11.52, 11.42, 11.5, 11.73, 12.07, 12.47, 12.92, 13.38, 13.85, 3.12, 3.37, 3.65, 3.97, 4.32, 4.72, 5.16, 5.65, 6.18, 6.76, 7.39, 8.07, 8.82, 9.65, 10.54, 11.51, 12.53, 13.57, 3.97, 4.32, 4.72, 5.16, 5.65, 6.18, 6.76, 7.39, 8.07, 8.82, 9.65, 10.54, 11.51, 12.53, 13.57, 14.53, 15.31, 15.88, 16.23, 16.11, 15.11, 13.68, 12.23, 11.52, 11.2, 11.07, 11.11, 11.31, 11.62, 11.99, 12.39, 12.82, 13.25, 3.11, 3.35, 3.62, 3.93, 4.28, 4.67, 5.1, 5.57, 6.08, 6.64, 7.25, 7.91, 8.64, 9.42, 10.27, 11.17, 12.12, 3.62, 3.93, 4.28, 4.67, 5.1, 5.57, 6.08, 6.64, 7.25, 7.91, 8.64, 9.42, 10.27, 11.17, 12.12, 13.08, 13.97, 14.72, 15.26, 15.55, 15.39, 14.57, 13.35, 12.11, 11.33, 10.92, 10.75, 10.77, 10.94, 11.22, 11.56, 11.93, 12.32, 12.71, 3.09, 3.32, 3.59, 3.89, 4.23, 4.6, 5.02, 5.48, 5.97, 6.52, 7.1, 7.74, 8.43, 9.18, 9.98, 10.83},
		"x": []float64{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138},
		"y": []float64{5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54}}
	//polygon, err := readGeoJsonFile("examples/csv/testdata/yn.json")
	//if err != nil {
	//	log.Fatal(err)
	//}
	polygonStr := "{\"type\":\"Polygon\",\"coordinates\":[[[70,5],[70,55],[140,55],[140,5]]]}"
	var polygonGeometry ordinarykriging.PolygonGeometry
	_ = json.Unmarshal([]byte(polygonStr), &polygonGeometry)
	defer timeCost()("训练模型与插值生成网格图片总耗时")

	ordinaryKriging := ordinarykriging.NewOrdinary(data["values"], data["x"], data["y"])
	fmt.Printf("train start\n")
	//ordinaryKriging := ordinarykriging.NewOrdinary(data["values"][:400], data["x"][:400], data["y"][:400])
	//if _, err := ordinaryKriging.Train(ordinarykriging.Exponential, 0, 100); err != nil {
	if _, err := ordinaryKriging.TrainNew(ordinarykriging.Exponential, 0, 100); err != nil {
		log.Fatal(err)
	}
	fmt.Printf("train end\n")

	gridPlot(ordinaryKriging, polygonGeometry.Coordinates)

	//var wg sync.WaitGroup
	//wg.Add(1)
	//go func() {
	//	defer wg.Done()
	//	gridPlot(ordinaryKriging, polygon)
	//}()
	//go func() {
	//	defer wg.Done()
	//	contourRectanglePng(ordinaryKriging)
	//}()
	//wg.Wait()
}

func gridPlot(ordinaryKriging *ordinarykriging.Variogram, polygon ordinarykriging.PolygonCoordinates) {
	defer timeCost()("插值生成网格图片耗时")
	fmt.Printf("Grid start\n")
	gridMatrices := ordinaryKriging.GridNew2(polygon, 0.01)
	//gridMatrices := ordinaryKriging.GridNew(polygon, 0.01)
	fmt.Printf("Grid end\n")
	var json = jsoniter.ConfigCompatibleWithStandardLibrary
	var colorStr = "[{\"value\":[0,15],\"color\":[0,0,255,255]},{\"value\":[0,15],\"color\":[5,89,252,255]},{\"value\":[0,15],\"color\":[23,190,254,255]},{\"value\":[0,15],\"color\":[21,255,225,255]},{\"value\":[0,15],\"color\":[21,255,144,255]},{\"value\":[0,15],\"color\":[19,255,24,255]},{\"value\":[0,15],\"color\":[156,255,2,255]},{\"value\":[0,15],\"color\":[205,255,19,255]},{\"value\":[0,15],\"color\":[239,222,15,255]},{\"value\":[0,15],\"color\":[253,128,17,255]},{\"value\":[0,15],\"color\":[255,63,2,255]},{\"value\":[-30,-15],\"color\":{\"R\":40,\"G\":146,\"B\":199,\"A\":255}},{\"value\":[-15,-10],\"color\":{\"R\":96,\"G\":163,\"B\":181,\"A\":255}},{\"value\":[-10,-5],\"color\":{\"R\":140,\"G\":184,\"B\":164,\"A\":255}},{\"value\":[-5,0],\"color\":{\"R\":177,\"G\":204,\"B\":145,\"A\":255}},{\"value\":[0,5],\"color\":{\"R\":215,\"G\":227,\"B\":125,\"A\":255}},{\"value\":[5,10],\"color\":{\"R\":250,\"G\":250,\"B\":100,\"A\":255}},{\"value\":[10,15],\"color\":{\"R\":252,\"G\":207,\"B\":81,\"A\":255}},{\"value\":[15,20],\"color\":{\"R\":252,\"G\":164,\"B\":63,\"A\":255}},{\"value\":[20,25],\"color\":{\"R\":247,\"G\":122,\"B\":45,\"A\":255}},{\"value\":[25,30],\"color\":{\"R\":242,\"G\":77,\"B\":31,\"A\":255}},{\"value\":[30,40],\"color\":{\"R\":232,\"G\":16,\"B\":20,\"A\":255}}]"
	//var colorStr = "[{\"value\":[0,15],\"color\":[0,0,255,255]},{\"value\":[0,15],\"color\":[5,89,252,255]},{\"value\":[0,15],\"color\":[23,190,254,255]},{\"value\":[0,15],\"color\":[21,255,225,255]},{\"value\":[0,15],\"color\":[21,255,144,255]},{\"value\":[0,15],\"color\":[19,255,24,255]},{\"value\":[0,15],\"color\":[156,255,2,255]},{\"value\":[0,15],\"color\":[205,255,19,255]},{\"value\":[0,15],\"color\":[239,222,15,255]},{\"value\":[0,15],\"color\":[253,128,17,255]},{\"value\":[0,15],\"color\":[255,63,2,255]}]"
	var color = []ordinarykriging.GridLevelColor{}
	err := json.Unmarshal([]byte(colorStr), &color)
	if err != nil {
		fmt.Printf("错误: %+v\n", err)
	}
	marshal, _ := json.Marshal(&ordinarykriging.DefaultGridLevelColor)
	fmt.Printf("Color: %+v\n", string(marshal))
	ctx := ordinaryKriging.Plot(gridMatrices, 500, 500, gridMatrices.Xlim, gridMatrices.Ylim, ordinarykriging.DefaultGridLevelColor)

	//subTitle := &canvas.TextConfig{
	//	Text:     "球面半变异函数模型",
	//	FontName: testDataDirPath + "/fonts/source-han-sans-sc/regular.ttf",
	//	FontSize: 28,
	//	Color:    color.RGBA{R: 0, G: 0, B: 0, A: 255},
	//	OffsetX:  252,
	//	OffsetY:  40,
	//	AlignX:   0.5,
	//}
	//if err := ctx.DrawText(subTitle); err != nil {
	//	log.Fatalf("DrawText %v", err)
	//}

	buffer, err := ctx.Output()
	if err != nil {
		log.Fatal(err)
	} else {
		saveBufferFile("grid.png", buffer)
	}

	//writeFile("gridMatrices.json", gridMatrices)
}

func contourRectanglePng(ordinaryKriging *ordinarykriging.Variogram) {
	defer timeCost()("插值生成矩形图片耗时")
	xWidth, yWidth := 800, 800
	contourRectangle := ordinaryKriging.Contour(xWidth, yWidth)
	pngPath := fmt.Sprintf("%v/%v.png", tempDataDirPath, time.Now().Format("2006-01-02 15:04:05"))
	ctx := ordinaryKriging.PlotRectangleGrid(contourRectangle, 500, 500, contourRectangle.Xlim, contourRectangle.Ylim, ordinarykriging.DefaultLegendColor)
	img := ordinaryKriging.PlotPng(contourRectangle)

	err := os.MkdirAll(filepath.Dir(pngPath), os.ModePerm)
	if err != nil {
		return
	}
	file, err := os.Create(pngPath)
	if err != nil {
		return
	}
	defer file.Close()
	png.Encode(file, img)

	buffer, err := ctx.Output()
	if err != nil {
		log.Fatal(err)
	} else {
		saveBufferFile("rectangle.png", buffer)
	}
}

func ContourWithBBoxPng(bbox [4]float64) {
	//contourRectangle := ordinaryKriging.ContourWithBBox(bbox, 0.01)
}

func readCsvFile(filePath string) (map[string][]float64, error) {
	f, err := os.Open(filePath)
	if err != nil {
		log.Fatal("Unable to read input file "+filePath, err)
		return nil, err
	}
	defer f.Close()

	records, err := csv.NewReader(f).ReadAll()
	if err != nil {
		log.Fatal("Unable to parse file as CSV for\n "+filePath, err)
		return nil, err
	}

	var values, lats, lons []float64

	for i := 1; i < len(records); i++ {
		var value, lat, lon float64
		if lon, err = strconv.ParseFloat(records[i][1], 64); err != nil {
			return nil, err
		}
		lons = append(lons, lon)
		if lat, err = strconv.ParseFloat(records[i][2], 64); err != nil {
			return nil, err
		}
		lats = append(lats, lat)
		if value, err = strconv.ParseFloat(records[i][5], 64); err != nil {
			return nil, err
		}
		values = append(values, value)
	}

	data := map[string][]float64{"values": values, "x": lons, "y": lats}

	//fmt.Printf("values %#v\n lons %#v\n lats %#v\n", values, lons, lats)
	//writeFile("tempdata.json", tempdata)

	return data, nil
}

func readGeoJsonFile(filePath string) (ordinarykriging.PolygonCoordinates, error) {
	content, err := ioutil.ReadFile(filePath)
	if err != nil {
		log.Fatal("Unable to read input file \n"+filePath, err)
		return nil, err
	}
	var polygonGeometry ordinarykriging.PolygonGeometry
	err = json.Unmarshal(content, &polygonGeometry)
	if err != nil {
		log.Fatalf("invalid json: %v", err)
		return nil, err
	}

	return polygonGeometry.Coordinates, nil
}

func timeCost() func(name string) {
	start := time.Now()
	return func(name string) {
		tc := time.Since(start)
		fmt.Printf("%v : time cost = %v s\n", name, tc.Seconds())
	}
}

func writeFile(fileName string, v interface{}) {
	filePath := fmt.Sprintf("%v/%v %v", tempDataDirPath, time.Now().Format("2006-01-02 15-04-05"), fileName)
	fmt.Printf("%#v\n", filePath)
	// fmt.Printf("%#v\n", v)
	content, err := json.Marshal(v)
	if err != nil {
		log.Fatal(err)
	}
	ioutil.WriteFile(filePath, content, os.ModePerm)
}

func saveBufferFile(fileName string, content []byte) {
	filePath := fmt.Sprintf("%v/%v %v", tempDataDirPath, time.Now().Format("2006-01-02 15-04-05"), fileName)
	fmt.Printf("%#v\n", filePath)
	ioutil.WriteFile(filePath, content, os.ModePerm)
}
